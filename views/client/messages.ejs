<div class="messages-container">
    <div class="messages-header">
        <h1>Admin Messages</h1>
        <div class="messages-info">
            <span class="online-status">Admin is online</span>
        </div>
    </div>

    <div class="messages-content">
        <div class="conversation-area">
            <div class="messages-list" id="messages-list">
                <!-- Messages will be loaded here -->
                <% if (typeof client !== 'undefined' && client && client.activityLogs) { %>
                    <% client.activityLogs.forEach(log => { %>
                        <% if (log.type === 'admin_message') { %>
                            <div class="message admin-message">
                                <div class="message-avatar">
                                    <div class="avatar admin-avatar">A</div>
                                </div>
                                <div class="message-content">
                                    <div class="message-header">
                                        <span class="message-sender">Admin</span>
                                        <span class="message-time"><%= new Date(log.timestamp).toLocaleString() %></span>
                                    </div>
                                    <div class="message-text">
                                        <%= log.details %>
                                    </div>
                                </div>
                            </div>
                        <% } else if (log.type === 'client_message') { %>
                            <div class="message client-message">
                                <div class="message-content">
                                    <div class="message-header">
                                        <span class="message-sender">You</span>
                                        <span class="message-time"><%= new Date(log.timestamp).toLocaleString() %></span>
                                    </div>
                                    <div class="message-text">
                                        <%= log.details %>
                                    </div>
                                </div>
                                <div class="message-avatar">
                                    <div class="avatar client-avatar">C</div>
                                </div>
                            </div>
                        <% } %>
                    <% }); %>
                <% } else { %>
                    <div class="no-messages">
                        <div class="no-messages-icon">ðŸ’¬</div>
                        <h3>No messages yet</h3>
                        <p>Start a conversation with the admin team</p>
                    </div>
                <% } %>
            </div>
        </div>

        <div class="message-input-area">
            <form class="message-form" id="message-form">
                <div class="input-group">
                    <textarea 
                        id="message-input" 
                        placeholder="Type your message to admin..." 
                        rows="3" 
                        required
                    ></textarea>
                    <button type="submit" class="send-button" id="send-message">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                            <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        Send
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
/* Messages Container */
.messages-container {
    height: 100vh;
    display: flex;
    flex-direction: column;
    background: var(--bg-primary);
}

/* Messages Header */
.messages-header {
    background: var(--gradient-card);
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-light);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.messages-header h1 {
    color: var(--text-primary);
    font-size: 1.5rem;
    margin: 0;
}

.online-status {
    color: var(--success-color);
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.online-status::before {
    content: '';
    width: 8px;
    height: 8px;
    background: var(--success-color);
    border-radius: 50%;
    animation: pulse 2s infinite;
}

/* Messages Content */
.messages-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    max-height: calc(100vh - 120px);
}

.conversation-area {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
}

.messages-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
}

/* Message Styles */
.message {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1rem;
}

.admin-message {
    justify-content: flex-start;
}

.client-message {
    justify-content: flex-end;
}

.message-avatar {
    flex-shrink: 0;
}

.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: white;
}

.admin-avatar {
    background: var(--primary-color);
}

.client-avatar {
    background: var(--accent-color);
}

.message-content {
    max-width: 70%;
    background: var(--bg-secondary);
    border-radius: 1rem;
    padding: 0.75rem 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.admin-message .message-content {
    background: var(--bg-secondary);
    border-bottom-left-radius: 0.25rem;
}

.client-message .message-content {
    background: var(--primary-color);
    color: white;
    border-bottom-right-radius: 0.25rem;
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.25rem;
    font-size: 0.8rem;
}

.message-sender {
    font-weight: 600;
    color: var(--text-secondary);
}

.client-message .message-sender {
    color: rgba(255, 255, 255, 0.8);
}

.message-time {
    color: var(--text-muted);
    font-size: 0.75rem;
}

.client-message .message-time {
    color: rgba(255, 255, 255, 0.6);
}

.message-text {
    color: var(--text-primary);
    line-height: 1.4;
    word-wrap: break-word;
}

.client-message .message-text {
    color: white;
}

/* No Messages State */
.no-messages {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
}

.no-messages-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.no-messages h3 {
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

/* Message Input Area */
.message-input-area {
    background: var(--bg-secondary);
    border-top: 1px solid var(--border-light);
    padding: 1rem 2rem;
}

.message-form {
    max-width: 800px;
    margin: 0 auto;
}

.input-group {
    display: flex;
    gap: 1rem;
    align-items: flex-end;
}

#message-input {
    flex: 1;
    background: var(--bg-primary);
    border: 1px solid var(--border-light);
    border-radius: 1rem;
    padding: 0.75rem 1rem;
    color: var(--text-primary);
    resize: none;
    font-family: inherit;
    font-size: 0.9rem;
    line-height: 1.4;
    max-height: 120px;
}

#message-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(0, 212, 255, 0.1);
}

.send-button {
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: 1rem;
    padding: 0.75rem 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.send-button:hover {
    background: var(--primary-hover);
    transform: translateY(-2px);
}

.send-button:active {
    transform: translateY(0);
}

/* Animations */
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

/* Responsive Design */
@media (max-width: 768px) {
    .messages-header {
        padding: 1rem;
    }
    
    .conversation-area {
        padding: 0.75rem;
    }
    
    .message-input-area {
        padding: 1rem;
    }
    
    .message-content {
        max-width: 85%;
    }
    
    .input-group {
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .send-button {
        align-self: flex-end;
    }
}
</style>

<script>
// Handle message form submission
document.getElementById('message-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    try {
        const response = await fetch('/client/send-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Add message to chat immediately for better UX
            addMessageToChat(message, 'client');
            messageInput.value = '';
            
            // Show success notification
            showNotification('Message sent successfully!', 'success');
        } else {
            showNotification('Failed to send message: ' + result.error, 'error');
        }
    } catch (error) {
        console.error('Error sending message:', error);
        showNotification('Failed to send message. Please try again.', 'error');
    }
});

// Add message to chat UI
function addMessageToChat(message, sender) {
    const messagesList = document.getElementById('messages-list');
    const noMessages = messagesList.querySelector('.no-messages');
    
    if (noMessages) {
        noMessages.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const now = new Date().toLocaleString();
    
    if (sender === 'client') {
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-header">
                    <span class="message-sender">You</span>
                    <span class="message-time">${now}</span>
                </div>
                <div class="message-text">${message}</div>
            </div>
            <div class="message-avatar">
                <div class="avatar client-avatar">C</div>
            </div>
        `;
    }
    
    messagesList.appendChild(messageDiv);
    messagesList.scrollTop = messagesList.scrollHeight;
}

// Show notification
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">&times;</button>
    `;
    
    // Add styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? 'var(--success-color)' : 'var(--error-color)'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        display: flex;
        align-items: center;
        gap: 1rem;
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 3000);
}

// Auto-resize textarea
document.getElementById('message-input').addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
});
</script>
